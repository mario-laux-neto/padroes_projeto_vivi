Demonstra√ß√£o de Padr√µes de Projeto em C++
Este reposit√≥rio cont√©m uma implementa√ß√£o pr√°tica em C++ de dois padr√µes de projeto fundamentais: Factory Method e Decorator.
O c√≥digo utiliza um cen√°rio de um sistema para uma cl√≠nica m√©dica para ilustrar o uso e os benef√≠cios de cada padr√£o.


Objetivo
O principal objetivo deste projeto √© fornecer um exemplo claro, did√°tico e funcional de como aplicar padr√µes de projeto para
resolver problemas comuns de design de software, como:

Desacoplar a cria√ß√£o de objetos do c√≥digo cliente (Factory Method).
Adicionar funcionalidades a objetos dinamicamente, sem alterar sua estrutura (Decorator).


Padr√µes de Projeto Implementados

üè≠ Factory Method
O padr√£o Factory Method √© utilizado para encapsular a cria√ß√£o de diferentes tipos de relat√≥rios (Relatorio).

Relatorio: Interface abstrata para os produtos (relat√≥rios).

RelatorioPaciente / RelatorioFinanceiro: Implementa√ß√µes concretas de relat√≥rios.

GeradorRelatorioFactory: Interface da f√°brica, que define o m√©todo criarRelatorio().

GeradorRelatorioPacienteFactory / GeradorRelatorioFinanceiroFactory: F√°bricas concretas que instanciam os relat√≥rios espec√≠ficos.

Isso permite que o sistema crie diferentes relat√≥rios sem que o c√≥digo principal precise saber os detalhes de qual classe de relat√≥rio est√° sendo instanciada.


‚ú® Decorator
O padr√£o Decorator √© usado para adicionar responsabilidades a uma Consulta de forma flex√≠vel e din√¢mica.

Consulta: A interface do componente base.

ConsultaBasica: O componente concreto inicial.

ConsultaDecorator: O decorador abstrato que "envolve" um objeto Consulta.

NotificacaoDecorator / ExameDecorator: Decoradores concretos que adicionam funcionalidades extras, como o envio de notifica√ß√µes ou a anexa√ß√£o de pedidos de exame.

Essa abordagem evita a cria√ß√£o de uma infinidade de subclasses para cada combina√ß√£o de funcionalidades (ex: ConsultaComNotificacao, ConsultaComExame, ConsultaComNotificacaoEExame, etc.).


Como Compilar e Executar
Pr√©-requisitos
Um compilador C++ moderno (como g++ ou Clang) que suporte C++11 ou superior.

Passos
Clone o reposit√≥rio:
git clone https://github.com/mario-laux-neto/padroes_projeto_vivi.git

Navegue at√© o diret√≥rio do projeto:
cd padroes_projeto_vivi

Compile o c√≥digo-fonte:
g++ -o demonstracao main.cpp -std=c++11

Execute o programa:
./demonstracao



‚ñ∂Sa√≠da Esperada
Ao executar o programa, voc√™ ver√° a seguinte sa√≠da no terminal, demonstrando o funcionamento de cada padr√£o:

--- DEMONSTRA√á√ÉO DOS PADR√ïES DE PROJETO NO SISTEMA DA CL√çNICA ---


--- 1. Testando o Padr√£o Factory Method ---

Administrador solicitou um relat√≥rio de pacientes.
Relat√≥rio de Pacientes: Gerando lista de pacientes atendidos no per√≠odo...

Administrador agora solicitou um relat√≥rio financeiro.
Relat√≥rio Financeiro: Gerando fluxo de caixa, contas a pagar/receber...

O Factory Method permitiu criar diferentes relat√≥rios usando o mesmo tipo de interface, facilitando a extensibilidade.


--- 2. Testando o Padr√£o Decorator ---

Cen√°rio 1: Agendamento de uma consulta simples.
-> Consulta B√°sica agendada.

Cen√°rio 2: Agendamento de uma consulta com lembrete.
-> Consulta B√°sica agendada.
   [DECORATOR] Adicionada notifica√ß√£o por E-mail/WhatsApp.

Cen√°rio 3: Agendamento de consulta com lembrete e pedido de exame.
-> Consulta B√°sica agendada.
   [DECORATOR] Adicionada notifica√ß√£o por E-mail/WhatsApp.
   [DECORATOR] Anexado pedido de exame(s).

O Decorator permitiu adicionar funcionalidades a uma consulta de forma din√¢mica e combinada.
